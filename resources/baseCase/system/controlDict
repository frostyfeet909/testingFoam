/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
)

application     interPhaseFieldFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1;

deltaT          0.001;

writeControl    adjustableRunTime;

writeInterval   0.05;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.5;

maxDeltaT       1;

InfoSwitches
{
allowSystemOperations 1;
}

functions
(
    DataSummary
	{
		functionObjectLibs ("libutilityFunctionObjects.so");
		type coded;
		redirectType DataSummary;
		outputControl timeStep;
		outputInterval 10;
		code
		#{

			scalar t = mesh().time().value();

			const volScalarField& alpha1 = mesh().lookupObject<volScalarField>("alpha1");

            const volScalarField& p = mesh().lookupObject<volScalarField>("p");

			const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            scalar vol = gSum(mesh().V());
            scalar Umax = max(mag(U.internalField()));
            scalar Umin = min(mag(U.internalField()));
            scalar Uave = fvc::domainIntegrate(mag(U)).value()/vol;
            scalar Mtot = fvc::domainIntegrate(alpha1).value()/vol;
            scalar pMax = max(p.internalField());
            scalar pMin = min(p.internalField());
            scalar pDiff = pMax - pMin;

			if( Pstream::master() == true )
			{
				std::ofstream fs;
				fs.open ("DataSummary.csv", std::fstream::app);
				fs.precision(8);
//				fs << t << "\t" << dt << "\t" << Q_pcInt << "\t" << V_Vapor << "\t" << Uy_Vapor << "\n" ;
                fs  << t << ", " << Uave  << ", " << Umax << ", "
                    << Umin << ", " << Mtot << ", " << pMax
                    << ", " << pMin << ", " << pDiff << "\n"  ;
				fs.close();
			}

		#};

		codeInclude
		#{
			#include <fstream>
		#};
	}


);


// ************************************************************************* //
